#! /bin/sh

function _ECHO(){ local COLOR; case "$1" in "EROR") test 1 -le "${DEBUG:=4}" || return 1; COLOR='\e[0;31m'; ;; "WARN") test 2 -le "${DEBUG:=4}" || return 2; COLOR='\e[0;33m'; ;; "LOGG") test 3 -le "${DEBUG:=4}" || return 3; COLOR='\e[0;32m'; ;; "INFO") test 4 -le "${DEBUG:=4}" || return 4; COLOR='\e[0m'; ;; *) return 5 ;; esac; echo -e "$COLOR$1\e[0m : $(date '+%Y-%m-%d %H:%M:%S') `printf %-18s "${0##*/}"` $2"; }; function C_ECHOPRAM(){ echo -e "`printf %-18s "${1}"` `printf %-1s "="` `printf %-20s "${2}"`"; }; function C_GET_RUN_PATHS(){ test $0 == "-bash" && __FileNam=. || __FileNam=$0; __RunnDir=$(dirname ${__FileNam:=.}) ; cd ${__RunnDir}; __HomeDir=$(pwd) && cd ".."; __FathDir=$(pwd) && cd ${__HomeDir}; C_ECHOPRAM  "- RunningDir"  "$__RunnDir"; C_ECHOPRAM  "- HomeDir"     "$__HomeDir"; C_ECHOPRAM  "- FatherDir"   "$__FathDir"; }; function C_GET_LOG_FUNCTION(){ if [ -z $IC_LOADED_LOG_FUNC ]; then if [ -e ${__HomeDir}/log.sh ]; then source "${__HomeDir}/log.sh"; echo "load log function : ${IC_LOADED_LOG_FUNC}!"; fi; fi; }; function C_SHOW_HELP(){ local s=" FunctionExported"; C_ECHOPRAM "$s" "C_ECHOWARN"; C_ECHOPRAM "$s" "C_ECHOLOGG"; C_ECHOPRAM "$s" "C_ECHOINFO"; C_ECHOPRAM "$s" "C_GET_RUN_PATHS"; C_ECHOPRAM "$s" "C_GET_LOG_FUNCTION"; }; function C_ECHOEROR() { _ECHO "EROR" "$1"; }; function C_ECHOWARN() { _ECHO "WARN" "$1"; }; function C_ECHOLOGG() { _ECHO "LOGG" "$1"; }; function C_ECHOINFO() { _ECHO "INFO" "$1"; }; 

C_GET_RUN_PATHS

# LIBREOFFICE4 工程目录
OFFICE_HOME="/usr/lib64/libreoffice"
OO_SDK_HOME="${OFFICE_HOME}/sdk"
OO_SDK_URE_HOME="${OFFICE_HOME}/ure-link"

# Totif 工程目录
SYS_PRJ=${__FathDir-"/home/focustar/icip6prj_totif"}
SYS_PRJ_BIN=${SYS_PRJ_BIN-"${SYS_PRJ}/bin"}
SYS_PRJ_LIB=${SYS_PRJ_LIB-"${SYS_PRJ}/lib"}
SYS_PRJ_LIB=${SYS_PRJ_LIB-"${SYS_PRJ}/inc"}
SYS_PRJ_INITD=${SYS_PRJ_INITD-"${SYS_PRJ}/init.d"}

echo "SYS_PRJ=${SYS_PRJ}"
echo "SYS_PRJ=${SYS_PRJ}"

# 进程名字可修改
prog_name=${prog_name-"TOTIFMain"}
prog_path=${prog_path-"${SYS_PRJ}/bin"}
prog_pidfile=${prog_pidfile-"/var/run/${prog_name}.pid"}
# 设置段错误不产生core文件
prog_options=${prog_options-"-env:URE_MORE_TYPES=file://${OFFICE_HOME}/program/types/offapi.rdb  ${prog_path}/cfg/totif_config.xml \"\"  &"}
prog_lockfile=${prog_lockfile-/var/lock/subsys/${prog_name}}


[ ! -z ${OO_SDK_HOME} ]     && OO_SDK__LIB=${OO_SDK_HOME}/lib          || echo "ERROR: OO_SDK_HOME is null."
[ ! -z ${OFFICE_HOME} ]     && OFFICE__URE=${OFFICE_HOME}/ure          || echo "ERROR: OFFICE_HOME is null."
[ ! -z ${OO_SDK_URE_HOME} ] && OO_SDK_URE__LIB=${OO_SDK_URE_HOME}/lib  || echo "ERROR: OO_SDK_URE_HOME is null."
[ ! -z ${SYS_PRJ} ]         && SYS_PRJ__LIB=${SYS_PRJ}/lib             || echo "ERROR: SYS_PRJ is null."
[ ! -z ${SYS_PRJ} ]         && SYS_BOOSTLIB=${SYS_PRJ}/lib/boost       || echo "ERROR: SYS_PRJ is null."
[ ! -z ${SYS_PRJ} ]         && SYS_GHOSTLIB=${SYS_PRJ}/lib/ghost       || echo "ERROR: SYS_PRJ is null."
# [ ! -z ${SYS_PRJ} ]       && SYS_URE__LIB=${SYS_PRJ}/lib/ure         || echo "ERROR: SYS_PRJ is null."


LD_LIBRARY_PATH=${OO_SDK__LIB}:${OFFICE__URE}:${OO_SDK_URE__LIB}::${LD_LIBRARY_PATH}
LD_LIBRARY_PATH=${SYS_PRJ__LIB}:${SYS_BOOSTLIB}:${SYS_GHOSTLIB}:.:..:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH
echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"
 
export MALLOC_CHECK_=0
echo "export MALLOC_CHECK_=0"
 
ls -l ${OO_SDK__LIB}
ls -l ${OFFICE__URE}
ls -l ${OO_SDK_URE__LIB}

ls -l ${SYS_PRJ__LIB}
ls -l ${SYS_BOOSTLIB}
ls -l ${SYS_GHOSTLIB}

# killall -9 soffice.bin; 
killall -9 TOTIFMain; 
killall -9 daemonTOTIF;

while true ; do
    #   用ps获取$PRO_NAME进程数量
    NUM=`ps aux | grep ${prog_name} | grep -v grep |wc -l`
    #   echo $NUM

    #   少于1，重启进程
    if [ "${NUM}" -lt "1" ];then
        echo "${prog_name} was killed"
        cd ${prog_path}
        sudo rm -f core.*
        ./${prog_name} ${prog_options}

    #   大于1，杀掉所有进程，重启
    elif [ "${NUM}" -gt "1" ];then
        echo "more than 1 ${prog_name},killall ${prog_name}"
        killall -9 $prog_name
        # 删除core 文件
        cd ${prog_path}
        sudo rm -f core.*
        ./${prog_name} ${prog_options}
    fi

    #   kill僵尸进程
    NUM_STAT=`ps aux | grep ${prog_name} | grep T | grep -v grep | wc -l`

    if [ "${NUM_STAT}" -gt "0" ];then
        killall -9 ${prog_name}
        # 删除core 文件
        cd ${prog_path}
        sudo rm -f core.*
        ./${prog_name} ${prog_options}
    fi
done
 
exit 0
